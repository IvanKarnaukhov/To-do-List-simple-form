{"version":3,"sources":["TodoCreateForm.js","TodoListItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoCreateForm","props","useState","inputValue","setInputValue","value","onChange","e","target","onClick","create","TodoListItem","isEditMode","setIsEditMode","todo","markAsDone","doAgain","remove","todoUpdate","index","moveUp","moveDown","length","isTodoDone","done","todoTitle","name","todoId","_id","titleStyle","textDecoration","newTodo","setNewTodo","style","disabled","TodoList","list","map","el","i","key","App","setList","a","axios","delete","then","response","catch","error","console","log","get","listFromServer","data","patch","title","post","put","useEffect","newList","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e5d4edde.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction TodoCreateForm(props) {\n\n\n    const [inputValue, setInputValue] = useState(\" \")\n    // const inputOnChange = e => setInputValue(e.target.value)\n    const inputOnChange = (e) => {      //const inputOnChange =e => setInputValue(e.target.value) как можно записать по другому\n        setInputValue(e.target.value)\n    }\n\n    const onCreate = () => {\n        props.create(inputValue)\n        setInputValue('0')\n    }\n\n\n    return (\n        <div>\n            To do Create Form\n\n            <input value={inputValue} onChange={inputOnChange}/>\n            {/*<input value={inputValue} onChange={e => setInputValue(e.target.value)}/> как можно записать по другому*/}\n            <button onClick={onCreate}>create</button>\n            {/*<button onClick={ () => props.create(inputValue)}>create</button>*/}\n\n\n        </div>\n    );\n}\n\nexport default TodoCreateForm;\n","import React, {useState} from 'react';\n\n\nfunction TodoListItem(props) {\n\n    const [isEditMode, setIsEditMode] = useState(false)\n    const {todo, markAsDone, doAgain, remove, todoUpdate, index, moveUp, moveDown, length} = props\n\n\n    const isTodoDone = todo.done\n    const todoTitle = todo.name\n    const todoId = todo._id\n\n    //const titleStyle = isTodoDone === false ? {textDecoration: \"line-through\", listStyleType: \"none\"} : {listStyleType: \"none\"}\n    const titleStyle = isTodoDone === true ? {textDecoration: \"line-through\"} : {}\n\n    const [newTodo, setNewTodo] = useState(todoTitle)\n\n    const inputHandler = (e) => {\n        setNewTodo(e.target.value)\n    }\n\n    const saveButtonHandler = () => {\n        todoUpdate(todoId, newTodo)\n        setIsEditMode(false)\n    }\n// {isEditMode ? ( ) : ( ) }\n//     if (isEditMode) {\n//\n//     } else {\n//\n//     }\n\n    return (\n        <div>\n            {isEditMode ? (\n                <div>\n                    <input onChange={inputHandler} value={newTodo}/>\n                    <button onClick={saveButtonHandler}>Save</button>\n                </div>\n            ) : (\n                <div>{isTodoDone ? (\n                    <li style={titleStyle}>\n                        {todoTitle}\n                        <button onClick={() => doAgain(todoId)}>UnDone</button>\n                        <button onClick={() => remove(todoId)}>X</button>\n                        <button onClick={() => moveDown(index)}>Down</button>\n                        <button onClick={() => moveDown(index)} disabled={index === 2}>Down</button>\n                        {/*str[str.length - 1]*/}\n                    </li>\n                ) : (\n                    <li style={titleStyle}>\n                        {todoTitle}\n                        <button onClick={() => markAsDone(todoId, todo.done)}>Done</button>\n                        <button onClick={() => remove(todoId)}>x</button>\n                        <button onClick={() => setIsEditMode(true)}>Edit</button>\n                        <button onClick={() => moveDown(index)} disabled={index === length -1 }>Down</button>\n                        <button onClick={() => moveUp(index)} disabled={index === 0}>Up</button>\n                        {/*<button onClick={() => setIsEditMode(true)}>Edit</button>*/}\n\n                    </li>\n                )} </div>\n            )}\n\n\n        </div>\n    );\n}\n\nexport default TodoListItem;\n","import React from 'react';\nimport TodoListItem from \"./TodoListItem\";\n\n\nfunction TodoList(props) {\n\n    const {markAsDone, doAgain, list, remove, todoUpdate, moveUp, moveDown} = props\n    const length = list.length\n\n    return (\n        <div>\n            To do list\n\n            {list.map((el, i) => <TodoListItem\n                key={el._id}\n                todo={el}\n                index={i}\n                markAsDone={markAsDone}\n                doAgain={doAgain}\n                remove={remove}\n                todoUpdate={todoUpdate}\n                moveUp={moveUp}\n                moveDown={moveDown}\n                length={length}\n            />)}\n\n\n        </div>\n    );\n}\n\nexport default TodoList;\n","import React, {useEffect, useState} from 'react';\nimport TodoCreateForm from \"./TodoCreateForm\";\nimport TodoList from \"./TodoList\";\nimport axios from 'axios';\n\n// const initialList = [\n//     {id: 1, title: \"first Todo\", done: true},\n//     {id: 2, title: \"second Todo\", done: true},\n//     {id: 3, title: \"third Todo\", done: true},\n// ]\n\nfunction App() {\n\n    const [list, setList] = useState([])\n\n\n    const remove = async (todoId) => {\n        await axios.delete(`http://localhost:5000/todo/${todoId}`)\n            .then(function (response) {\n                    // const newList = [...list].filter(el => el._id !== todoId)\n                    // setList(newList)\n                }\n            )\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n        await axios.get('http://localhost:5000/todo')\n            .then(function (response) {\n                    const listFromServer = response.data\n                    console.log(listFromServer)\n                    setList(listFromServer)\n                }\n            )\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n        // const newList = [...list].filter(el => el._id !== todoId)\n        // setList(newList)\n    };\n\n    const todoUpdate = async (todoId, newTodo) => {\n        await axios.patch(`http://localhost:5000/todo/${todoId}`, {name: newTodo})\n            .then(function (response) {\n                    // const newList = [...list].map(el => {\n                    //     if (el._id === todoId) return {...el, title: newTodo}\n                    //     return el\n                    // })\n                    // setList(newList)\n\n                }\n            )\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n        await axios.get('http://localhost:5000/todo')\n            .then(function (response) {\n                    const listFromServer = response.data\n                    console.log(listFromServer)\n                    setList(listFromServer)\n                }\n            )\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n    };\n\n    const create = async (title) => {\n\n            await axios.post('http://localhost:5000/todo', {name: title})\n                .then(function (response) {\n                    }\n                )\n                .catch((error) => console.log(error)\n                )\n\n            await axios.get('http://localhost:5000/todo')\n                .then(function (response) {\n\n                        // const listFromServer = response.data\n                        // console.log(listFromServer)\n                        setList(response.data)\n                    }\n                )\n                .catch((error) => console.log(error)\n                )\n\n// const newItem = {\n//     _id: Math.random() * 10,\n//     title: title,\n//     done: true,\n//}\n\n// const undatedList = [...list, newItem];\n// setList(undatedList)\n        }\n    ;\n\n    async function markAsDone(todoId, done) {\n        await axios.put(`http://localhost:5000/todo/${todoId}`, {done: !done})\n            .then(function (response) {\n                    //     const newList = [...list].map(el => {\n                    //         if (el._id === todoId) return {...el, done: true}\n                    //         return el\n                    //     })\n                    //     setList(newList)\n                }\n            )\n            .catch(function (error) {\n                console.log(error);\n            })\n\n        await axios.get('http://localhost:5000/todo')\n            .then(function (response) {\n                    const listFromServer = response.data\n                    console.log(listFromServer)\n                    setList(listFromServer)\n                }\n            )\n            .catch(function (error) {\n                console.log(error);\n            })\n\n    }\n\n    async function doAgain(todoId, done) {\n        await axios.put(`http://localhost:5000/todo/${todoId}`, {done: done})\n            .then(function (response) {\n                    // const newList = [...list].map(el => {\n                    //     if (el._id === todoId) return {...el, done: false}\n                    //     return el\n                    // })\n                    // setList(newList)\n                }\n            )\n            .catch(function (error) {\n                console.log(error);\n            })\n\n        await axios.get('http://localhost:5000/todo')\n            .then(function (response) {\n                    const listFromServer = response.data\n                    console.log(listFromServer)\n                    setList(listFromServer)\n                }\n            )\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n\n    const moveUp = (i) => {\n        if (i !== 0) {\n            const newList = [...list]\n            newList.splice(i - 1, 0, newList.splice(i, 1)[0])\n            setList(newList)\n        }\n    }\n\n    const moveDown = (i) => {\n        const newList = [...list]\n        newList.splice(i + 1, 0, newList.splice(i, 1)[0])\n        setList(newList)\n    }\n\n    useEffect(() => {\n        axios.get('http://localhost:5000/todo')\n            .then(function (response) {\n                    const listFromServer = response.data\n                    console.log(listFromServer)\n                    setList(listFromServer)\n                }\n            )\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n\n    }, [])\n\n    return (\n        <div>\n            <TodoCreateForm\n                create={create}\n                //const titleStyle = isTodoDone === false ? {textDecoration: \"line-through\", listStyleType: \"none\"} : {listStyleType: \"none\"}\n            />\n            <TodoList\n                markAsDone={markAsDone}\n                doAgain={doAgain}\n                list={list}\n                remove={remove}\n                todoUpdate={todoUpdate}\n                moveUp={moveUp}\n                moveDown={moveDown}\n\n            />\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}